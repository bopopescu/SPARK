Meeting Note:
how long is the data transfer between stages

>> try it 
tc will tell the OS instead
tc ... 

How do they set the network connection
newConnection(socket.getIp());


normal : 88, 87, 89 

10 Mbps, the workload runs for X seconds, and SE was [triggered or not triggered?] 93, 88, 86, 86, 90

1 Mbps, the workload runs for X seconds, and SE was [triggered or not triggered?] 93, 87, 86, 87, 89

0.1 Mbps, the workload runs for X seconds, and SE was [triggered or not triggered?] 90, 87, 89

0.01 Mbps, the workload runs for X seconds, and SE was [triggered or not triggered?] 92, 88, 86


today

[10.28.34] haryadi.gunawi: time cp /tmp/largefile /proj/...
[10.28.50] haryadi.gunawi: time cp /proj/... /tmp/largfile


Topology!!!!
hadoop speculative execution
https://people.eecs.berkeley.edu/~adj/publications/paper-files/osdi_late.pdf section 2.1

http://ucare.cs.uchicago.edu/pdf/socc13-limplock.pdf section 5.1
section 3 and 4

struggler -> someone slower than the rest



Stage3:

TaskC --- TaskE  -- write the entire data to HDFS file?
TaskD --- TaskE 


4 stages: A-read, B-sort1, C-sort2, D-write (CONFIRMED)
2 partitions

Every stage there are two tasks (CONFIRMED)

A1-B1 ??
A2-B2 ??
Does A1 send something B2?? Is this 1-on-1 communication? Or all-to-all communication?
TODO: Confirm / understand the dataflow

B1-C1
B1-C2
B2-C1      (w3 slow, so data transfer to C1 is slow)
B2-C2      (w3 slow, so data transfer to C2 is slow)
                 FLAW of current SE (it’s based on task progress score, the base SE does NOT expose
                  The individual path bandwidths)
                 The fact that C2 reads from B1 AND B2   …. But C2 only reports one progress score

Driver ← (low progress score + B1-C1 + B2-C1) C1 ← B1 (1000 Mbps) .. B2 (1 Mbps)
Driver ← (low progress score) C2 

-------------------
For (......) {
   Start = gettimeofday()
    Byte = readInput(byteBuffer[64KB]);  // C1 runs to get data from B1/B2       // network packet, (64 KB, HDFS)
   End = gettimeofday();
   Bw  = byte/(end-start);
}
----------------- 1 hour

B1-C1:   999 Mbps, 998 Mbps,  865 Mbps, 
B2-C1:       5 Mbps,     1 Mbps,     4 Mbps
B1-C2:   999 Mbps, 998 Mbps,  865 Mbps, 
B2-C2:       5 Mbps,     1 Mbps,     4 Mbps


Progress score is important!!
print the current time and the progress
	how the progress score is increasing in each of the task 
	progress score for each task (B1, B2)
https://web.skype.com/xmmfallback?pic=0-eus-d5-30cae4631b0a1627c35c2299e47e605b

Task
- delay W2
- monitor every task


Daniar (september-1)

Delay W2  (A2 → B2 transfer? Local file ;;;  NFS → A2 → B2)

Delay 100, 10, and 1 Mbps

In each scenario, report your observation about the progress score of EACH TASK.
(who is fast, who is slow?)
A1/A2/B1/B2/..: slow/fast (time to completion)

In each scenario, check if SE is run or not


- run task in one node and compare with W2 and W1
- modify heartbeat 2 s
- progress score
- understand the communication pattern
     Do this: 
     W1: T1, T3,    W3: T5, T7
     W2: T2, T4,    W4: T6, T8


-CREATE 


-------------------
     A while back:
     W1: T1, T3,    W3: T5, T7
     W2: T2, T4,    W4: T6, T8
     But now (bad)
     W1: T1     W3: T3
     W2: T2     W4: T4

--------------
Todo-0: heartbeat changes to 2 seconds

Todo-1a: two separate jobs, one node, verify tc is correct:    localFile → Task.  Fast/SLow?
Todo-1b: Two task of the same stage in one limping node.   localFile → T1 → T2 (all in the same limping node). Fast/Slow?
  
Todo-3: a complete sort (yes, put back, save as TextFile, 4 stages)


     Do this: 
     W1: T1, T3,    W3: T5, T7
     W2: T2, T4,    W4: T6, T8
     1 Mbps, job latency?
     Does SE run? (same report style)

Todo-4: Understand the communication pattern … 
     (Also measure integer count !)  .. or whatever other method

Todo-5: 
Try create a SIMPLEST topology that will give me 4 tasks total in 4 workers:
T1-T3 
T1-T4
T2-T3
T2-T4
(you need to create the input data??? .. but make sure that it will lead to all to all)
https://databricks.gitbooks.io/databricks-spark-knowledge-base/content/best_practices/prefer_reducebykey_over_groupbykey.html



W2 … (manual finding where W2 is)  MUST BE in 2a

[M1234]--blue

M 1 2b 2b 3 4 (ns topology)
    [M 1 2b 3 4] -- blue  
    2a -- 2b  (connected directly via a link)

    Your spark ONLY knows 5 nodes
     [M 1 2a 3 4]
     tc on 2b  (it’s okay to delay the local lo)

Do network test, tc-2b … 
    1-3 is fine
    2a-3 is not fine


where is the buffer
set timing before and after

follow the rdd
inside rdd is buffer


- start from the executor
- get the buffer 
- add timing 

Delay: 0.125 MBps → 1 Mbps
T5(W1)-->T7(W3)  → fast  (23 MBps)
T5(W1)-->T8(W4) ---> fast  (~23 MBps)
T6(W2)-->T7(W3)  → slow  (0.26 MBps)
T6(W2)-->T8(W4)  → slow (0.24 MBps)
Overall job latency: (expected ) 5 minutes

TODO-1: 
stage4 starts, 1-2 seconds, kill W2 (kill all spark applications;  kill -s 9 PID ;; ) 
(manual --- just eyeball the monitor, both T7 and T8 already spend about 1-5 seconds, kill W2)
Report the job latency → approximate if we implement PBSE and restart T6 elsewhere

TODO-2:
Variant of TODO-1:  instead of kill spark applications;  you enable TC by dropping 100% of the packets
Let’s see if T7 and T8 got “network error connection” 
REport the job latency (and observe what’s going on)

TODO-3: 
Either use TODO-1 or TODO-2 setups (the easiest one)
Learn how T6 will be re-run in other node  (because T6 was deemed not functional from W2, so likely Spark will run T6 elsewhere)
So what you’ll learn here is the **CONTROL FLOW** from: (a)  network failure/W2 crash → (b) some detection (who is detecting this??) → (c) the fact that T6 will be rerun elsewhere → (d) the fact that T7 and T8 are re-fetching the data from T6 from other node
The most important thing is understanding the transition from (b) → (c), why?

TODO-4:
How heartbeat is sent by the executor/?? To the driver/master … and the application-driver checks all the progress score (??)

TODO-5:
Can you piggy back the number “23 MBps, and 0.24 Mbps” as part of the heartbeat
T7.Heartbeat {      string [ 2 ] array =  {  “T5--T7--23” ;  “T6--T7--0.26” }
T8.Heartbeat {      string [ 2 ] array =  {  “T5--T8--24” ;  “T6--T8--0.25” }
Driver: aha, I see those values,  you can declare T6 is slow 
So the driver knowing that T6 is slow → it will TRIGGER the step (b) → (c)
Suppose there is a function:  recover(aTask);


During stage 4:
- T7 reads 17 MB from W1 and 17 MB from W2 -> in monitoring page is written 32.6 MB in total.
- T7 reads 14 MB from W1 and 14 MB from W2 -> in monitoring page is written 27.2 MB in total.
Note: I got 17 MB and 14 MB  directly from the code by doing .size()
[12.34.40] Daniar Heri Kurniawan: http://node-1.testspark.cs331-uc.emulab.net:8080/history/app-20160917232407-0023/stages/stage/?id=3&attempt=0
[12.35.12] Daniar Heri Kurniawan: That is the monitoring page that shows 32.6 MB and 27.2 MB
